/////////////////////////////////////////////////////////////
// polyText.txt                                            //
// author: Stephen Gannon                                  //
// date: 27/11/19                                          //
// purpose: Contains an explanation of designed data type, //
//   	    specifications and pseudo-code for             //
//          all operations                                 //
/////////////////////////////////////////////////////////////

-------------------------------------------------------------------------------

////////////////////////////////////////////////////
// Explanation of the designed data type          //
////////////////////////////////////////////////////


////////////////////////////////////////////////////
// polyList is the data type made for the polynomial.
// It contains a polyNode type for head and current.
////////////////////////////////////////////////////

typedef struct
{
    polyNode *head;
    polyNode *current;
} polyList;    


///////////////////////////////////////////////////
// polyNode is the data type used for the nodes of
// the polyList.
// It contains the polyData data type which contains
// information on each node.
// It also contains the address of the next node.
///////////////////////////////////////////////////

typedef struct
{
    polyData d;
    struct n *next;
} polyNode;    


///////////////////////////////////////////////////
// polyData is the data type used for defining the
// information within each node.
// It contains a double coefficient for each term
// and int order which is the order of the
// coefficient.
///////////////////////////////////////////////////

typedef struct
{
    double coefficient;
    int order;
} polyData;    


-------------------------------------------------------------------------------

///////////////////////////////////////////////////////
// Specifications and  Pseudo-code for all operations//
///////////////////////////////////////////////////////


////////////////////////////////////////////////////
// Name: polyDeclare()
// Purpose: To declare the polynomial in the main
// 	    and ask the user for the required data
// 	    for the polynomial
// Parameters: poly - the created empty polynomial
// 	       order - the order of the polynomial
//	       coefficient - the coefficients for
//	       		     each term
//Return: The filled polynomial list poly
////////////////////////////////////////////////////

polyList polyDeclare()
{
	creates polynomial
	asks user for size of order and stores value
	ask the user to enter the coefficicents from
	least significant to most significant
	uses fillPoly to input the above data into a polynomial
}


///////////////////////////////////////////////////
// Name: polyCreate()
// Purpose: Creates and empty polynomial, head points
//          to tail and has no coeffiecients.
// Parameters: Use fillPoly() or newCoeff() to add
//             new coefficiients.
// return: pointer to polynomial if successful
//   	   NULL if unsuccessful
///////////////////////////////////////////////////

polyList *polyCreate()
{
	creates a polyList and assigns it the required memory with malloc
	checks for allocation success
	allocates memory for the head
	if allocation fails
	   deallocate list and set it to NULL
	return poly
}


//////////////////////////////////////////////////
// Name: fillPoly()
// Purpose: Fills an empty polynomial of a
//          certain order with coefficients in arr[]
// Parameters: poly - the empty polynomial to fill
// 	       order - the order of the polynomial
//	       arr - the array of coefficients
// Return: Pointer to polynomial if successful
//////////////////////////////////////////////////

int fillPoly(polyList, order, array)
{
	fill polyList parameters
	assign head coefficients
	for all the powers of x
	    assign the coefficients
	    set current to next
	reset currnet to head
}


//////////////////////////////////////////////////
// Name: newCoeff()
// Purpose: Creates and returns a new polyNode to
// 	    be added to the next node of the
//	    previous node
// Parameters: coefficient - the value of the coefficient
//   	       order - the order of the coefficient
// Return:  pointer to the new node, if successful
//////////////////////////////////////////////////

polyNode *newCoeff(coefficient, order)
{
	allocate memory for the new node
	exit if allocation results in a NULL
	assign attributes
	link node to current node
}


//////////////////////////////////////////////////
// Name: polyDelete()
// Purpose: Deletes and frees up memory from a
// 	    polynomial
// Parameters: poly - the to delete
// Return: returns 0 if successful
//////////////////////////////////////////////////

polyDelete(address of polylist)
{
	reset current to head
	while (there is a next node)
	      delete current node
	free head and polynomial
}


//////////////////////////////////////////////////
// Name: deleteNext()
// Purpose: Deletes and frees up memory for the next
// 	    node after the current node specified
// Parameters: toDelete - the coefficient node to
// 	       to delete
// Return: returns 0 if successful
//////////////////////////////////////////////////

int deleteNext(ptr to current address)
{
	sets a node to delete
	if reaches tail
	   return -1
	else
	   keeps ptr to node to be deleted
	   set next to current
	   delete node from memory
}


///////////////////////////////////////////////////////
// Name: polyAdd()
// Purpose: Adds two polynomials together
// Parameters:  poly1 - pointer for the first polynomial to added 
//              poly2 - pointer for the second polynomial to be added
// Return: sum of poly1 and poly2
///////////////////////////////////////////////////////

polyList polyAdd(polylist1, polylist2)
{
	 If polylist1 >= polylist2
	    Create polylist of size order+1
	    For loop (for order of polylist 2)
    	    	Add all elements for smaller polylist
    	    For loop (for order of polylist 1 - polylist 2)
    		Add all elements to 0 for overflow
	 Else 
            create polylist of size order+1
    	    For loop (for order of polylist 1)
    	    	Add all elements for smaller polylist
            For loop (for order of polylist 2 - polylist 1)
    	    	Add all elements to 0 for overflow
}


///////////////////////////////////////////////////////
// Name: polySubtract()
// Purpose: Subtracts a polynomial from another
// Parameters:  poly1 - pointer for the minuend polynomial
//              poly2 - pointer for the the subtrahend polynomial
// Return: poly1 minus poly2
///////////////////////////////////////////////////////

polyList polySubtract(polylist1, polylist2)
{
	 If polylist1 >= polylist2
            Create polylist of size order+1
	    For loop (for order of polylist 2)
    	    	subtract all elements for smaller polylist
	     For loop (for order of polylist 1 - polylist 2)
    	     	Make all terms negative
	 Else 
             Create polylist of size order+1
	     For loop (for order of polylist 1)
    	     	 subtract all elements for smaller polylist
	     For loop (for order of polylist 2 - polylist 1)
    	         Leave all elements as they are
}


///////////////////////////////////////////////////////
// Name: polyMultiply()
// Purpose: Multiplies a polynomial by a double
// Parameters: poly1 - pointer for the polynomial
//             multiplier - number that multiplies the polynomial
// Return: Polynomial that was multiplied
///////////////////////////////////////////////////////

polyList polyMultiply(polylist, multiplier)
{
	Create polylist of size polylist
    	For loop(for order of polylist)
            Polylist[i] * multiplier
    	Return 
}


//////////////////////////////////////////////////////
// Name: polyDivide()
// Purpose: Divides a polynomial by a double
// Parameters: poly1 - pointer for the polynomial
//             divider - number that divides the polynomial
// Return: Polynomial that was divided
///////////////////////////////////////////////////////

polyList polyDivide(polylist, divider)
{
	For loop( for order of polylist)
            Polylist[i] / divider
    	Return
}

//////////////////////////////////////////////////////
// Name: polyNormalise()
// Purpose: Adjusts coeffiecients so that the coefficient
//          of highest order is 1
// parameters: poly1 - pointer to the polynomial
// Return: norm, the adjusted version of poly1 so
// 	   coefficient of highest order is 1
//////////////////////////////////////////////////////

Polylist polyNormalise(polylist)
{
	 Order = order(polylist)
    	 For loop of order(polylist) 
    	     highCoeff = current value
    	     polyList divide(polylist, highCoeff)
    	 return
}


/////////////////////////////////////////////////////
// Name: polyOrder()
// Purpose: Finds the highest power whos coefficient
// 	    isnt 0
// Parameters: poly1 - pointer to the polynomial
// Return: highOrder, the most significant order
/////////////////////////////////////////////////////

Int polyOrder(polylist)
{
    Int order
    For order of the polylist 
        If the element is non-zero
            Order = order of element
}


////////////////////////////////////////////////////
// Name: polyPrint()
// Purpose: prints a polynomial to stdout
// Parameters: poly1 - pointer to the polynomial
// Return: The printed polynomial to the stdout
////////////////////////////////////////////////////

Void polyPrint(polylist)
{
	Prints first coefficient
	For loop for remaining 
	    Prints the remaining coefficients with respective order to stdout
}

-------------------------------------------------------------------------------------
